<?php


namespace App\Services;


use App\Constants\OrderConstant;
use App\Helpers\AccountingHelper;
use App\Helpers\RandomHelper;
use App\Http\Resources\Order\OrderResource;
use App\Models\Customer;
use App\Models\Order;
use App\Models\OrderDetail;
use App\Models\OrderNote;
use App\Models\OrderStatusTime;
use App\Models\OrderSupplier;
use App\Models\ReportUserQuotationCustomer;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class OrderService extends BaseService
{
    protected string $_resource = OrderResource::class;


    /**
     * @param  array  $data
     * @return Order|Builder|Model|JsonResponse
     * @throws Exception
     */
    public function store(array $data): Order
    {
        return DB::transaction(
            function () use($data) {
                /** @var Customer $customer */
                $customer = Auth::user();
                $this->processService($data);
                $data['organization_id'] = getOrganization();
                $data['customer_id'] = $customer->id;
                $data['code'] = RandomHelper::orderCode();
                $this->assignStaffToOrder($data, $customer);
                $data['is_website'] = 1;
                /** @var Order $order */
                $order = parent::store($data);
                (new OrderDetailService())->insertFromOrder($order, $data['products']);
                return $order;
            }
        );
    }

    /**
     * @param  array  $data
     * @param  Customer  $customer
     */
    public function assignStaffToOrder(array &$data, Customer $customer): void
    {
        $data['staff_care_id'] = optional($customer->staffCare)->id;
        $data['staff_order_id'] = optional($customer->staffOrder)->id;
        (new CustomerService())->assignUserToCustomer($staffQuotation, ReportUserQuotationCustomer::class);
        $data['staff_quotation_id'] = $staffQuotation;
    }

    public function update(string $id, array $data): JsonResponse
    {
        $order = Order::query()->findOrFail($id);
        if ($res = $this->msgUpdatingNotAllow($order->status)) {
            return $res;
        }
        return parent::update($id, $data); // TODO: Change the autogenerated stub
    }

    /**
     * @param  string  $id
     * @return JsonResponse
     */
    public function destroy(string $id): JsonResponse
    {
        $order = Order::query()->findOrFail($id);
        // Đặt cọc thì không được xóa
        if ($res = $this->msgUpdatingNotAllow($order->status, 'order.can_not_delete')) {
            return $res;
        }
        $order->delete();
        return resSuccess();
    }

    /**
     * @param  string  $status
     * @param  string|null  $msg
     * @return string|null
     */
    public function msgUpdatingNotAllow(string $status, ?string $msg = 'order.can_not_update'): ?string
    {
        if ($this->updatingNotAllow($status)) {
            return resError(trans($msg));
        }
        return null;
    }

    /**
     *
     * @param  string  $status
     * @return bool
     */
    public function updatingNotAllow(string $status): bool
    {
        $index = array_search($status, OrderConstant::STATUSES) ?? 0;
        return $index >= OrderConstant::STATUS_DEPOSIT_INDEX;
    }

    /**
     * @param  array  $data
     * @return array
     */
    public function prepareStore(array $data): array
    {
        $products = $data['products'];
        unset($data['products']);
        $orders = [];
        foreach ($products as $key => $item) {
            $supplierId = (new SupplierService())->firstOrCreateSupplierByName($item['supplier'])->id;
            $properties = $this->getOrderProperties($orders, $data, $supplierId, $key);
            $item['supplier_id'] = $properties['supplier_id'] = $supplierId;
            unset($item['supplier']);
            array_push($properties['products'], $item);
            //Tính toán inspection_cost, woodworking_cost, discount_cost, order_fee

            $orders[$supplierId] = $properties;
        }
        return $orders;
    }

    /**
     * @param  array  $orders
     * @param  array  $data
     * @param  string  $supplierId
     * @param  int  $optional
     * @return array
     */
    private function getOrderProperties(array $orders, array $data, string $supplierId, int $optional): array
    {
        if (isset($orders[$supplierId])) {
            return $orders[$supplierId];
        }
        $data['date_ordered'] = now();
        $data['code'] = RandomHelper::orderCode($optional);
        $properties = $data;
        $properties['products'] = [];
        return $properties;
    }

    /**
     * @param  int|null  $status
     * @return string
     * @throws Exception
     */
    public function getStatusKeyByStatus(string $status): string
    {
        return array_keys(OrderConstant::STATUSES)[$status];
    }

    /**
     * @param  array  $data
     */
    public function processService(array &$data)
    {
        $data['date_ordered'] = now();
        //Tính toán inspection_cost, woodworking_cost, discount_cost, order_fee
        (new AccountingService())->calculatorServiceCost($data);
    }

    /**
     * @param  string  $orderId
     * @param  string  $column
     */
    public function incrementByColumn(string $orderId, string $column): void
    {
        optional(Order::query()->find($orderId))->increment($column);
    }

    /**
     * @param  string  $orderId
     * @param  string  $supplierId
     * @return Order
     */
    public function splitBySupplier(string $orderId, string $supplierId): Order
    {
        /** @var Order $order */
        $order = Order::query()->findOrFail($orderId);
        $condition = ['supplier_id' => $supplierId, 'order_id' => $orderId];

        $deposit = (new CustomerService())->getCustomerOffer()['deposit'];

        $newOrder = $order->replicate();
        $newOrder->code = RandomHelper::orderCode();
        $newOrder->deposit_percent = $deposit;
        $newOrder->save();

        OrderSupplier::query()->where($condition)->update(['order_id' => $newOrder->id]);
        OrderSupplier::query()->where('order_id', $orderId)->delete();

        OrderDetail::query()->where($condition)->update(['order_id' => $newOrder->id]);

        $this->updateOrderSupplier($newOrder);
        $this->updateOrderSupplier($order);

        $this->updateOrderNote($newOrder->id, $order->id, $supplierId);

        // Xóa đơn hàng nếu đơn hàng lúc đầu này không còn sản phẩm
        if (!OrderDetail::query()->where('order_id', $orderId)->exists()) {
            $order->delete();
        }
        return $newOrder;
    }

    /**
     * @param  Order  $order
     * @return float
     */
    public function updateOrderSupplier(Order $order): float
    {
        $orderId = $order->id;

        /** @var OrderSupplier $orderSupplier */
        $orderDetails = OrderDetail::query()->where(
            ['order_id' => $orderId]
        )->groupBy('supplier_id')->selectRaw(
            "sum(amount_cny) as amount_cny, sum(quantity) as quantity, supplier_id"
        )->get();

        $inspectionCost = 0;
        $orderCost = 0;
        $orderFee = 0;
        $orderPercent = 0;
        foreach ($orderDetails as $detail) {
            $supplierId = $detail->supplier_id;
            $orderSupplier = OrderSupplier::query()->where(
                ['order_id' => $orderId, 'supplier_id' => $supplierId]
            )->first();

            if(!$orderSupplier)
            {
                $orderSupplier = OrderSupplier::query()->create(
                    ['order_id' => $orderId, 'supplier_id' => $supplierId, 'is_inspection' => $order->is_inspection, 'is_woodworking' => $order->is_woodworking, 'is_shock_proof' => $order->is_shock_proof]
                );
            }

            $data = [];
            $data['order_cost'] = $orderCostTmp = AccountingHelper::getCosts(
                $detail->amount_cny * $order->exchange_rate
            );
            $data['order_fee'] = $orderFeeTmp = (new AccountingService())->getOrderFee($orderCostTmp, $orderPercent);
            $data['discount_cost'] = (new AccountingService())->getDiscountCost($orderFee);
            $data['is_inspection'] = $orderSupplier->is_inspection;
            $data['inspection_cost'] = $data['is_inspection'] ? (new AccountingService())->getInspectionCost(
                (int)$detail->quantity
            ) : 0;
            
            $orderSupplier->update($data);

            $inspectionCost += $orderSupplier->is_inspection ? $data['inspection_cost'] : 0;
            $orderCost += $orderCostTmp;
            $orderFee += $orderFeeTmp;
            
        }

        $order->order_cost = $orderCost;
        $order->inspection_cost = $inspectionCost;
        $order->order_fee = (new AccountingService())->getOrderFee($orderCost, $orderPercent);
        $order->order_percent = $orderPercent;
        $order->save();
        

        return AccountingHelper::getCosts($inspectionCost);
    }

    /**
     * @param  string  $orderId
     * @param  float  $exchangeRate
     * @return float
     */
    private function getOrderCostAndQuantity(string $orderId, float $exchangeRate): array
    {
        $details = OrderDetail::query()->where('order_id', $orderId)->get();
        return [
            'order_cost' => $details->sum('amount_cny') * $exchangeRate, 'quantity' => $details->count()
        ];
    }

    /**
     * @param  Order  $newOrder
     * @param  float  $totalOrder
     */
    public function updateOrderCost(Order $newOrder, float $totalCost)
    {
        $service = new AccountingService();
        $newOrder->order_cost = $totalOrder = AccountingHelper::getCosts($totalCost);

        if ($newOrder->status === OrderConstant::KEY_STATUS_WAITING_QUOTE || $newOrder->status === OrderConstant::KEY_STATUS_WAITING_DEPOSIT) {
            $newOrder->order_fee = $orderFee = $service->getOrderFee(
                $totalOrder,
                $orderPercent
            );
            $newOrder->discount_cost = $service->getDiscountCost($orderFee);
            $newOrder->order_percent = $orderPercent;
            // $newOrder->inspection_cost = $newOrder->;
        }

        $newOrder->save();
    }

    public function getDebtCost(array $ids): float
    {
        return Order::query()->findMany($ids)->sum('debt_cost');
    }

    /**
     * @param  string  $orderId
     * @param  string  $status
     */
    public function setStatusTime(string $orderId, string $status)
    {
        $order = OrderStatusTime::query()->firstOrCreate(['order_id' => $orderId]);
        $order->{$status} = now();
        $order->save();
    }

    /**
     * @param  string  $orderId
     * @param  string  $oldOrderId
     * @param  ?string  $supplierId
     */
    private function updateOrderNote(string $orderId, string $oldOrderId, ?string $supplierId = null): void
    {
        OrderNote::query()->where(['order_id' => $oldOrderId, 'supplier_id' => $supplierId])->update(
            ['order_id' => $orderId]
        );
    }

    /**
     * Update order cost in order and order supplier
     * @param  string  $oderId
     */
    public function updateOrderCostByCurrentCustomer()
    {
        $orders = Order::query()->where('status', OrderConstant::KEY_STATUS_WAITING_QUOTE)->get();
        foreach ($orders as $order) {
            $orderCost = $order->order_cost;
            /** @var Order $order */
            $order->inspection_cost = $this->updateOrderSupplier($order);
            $order->save();
            $this->updateOrderCost($order, $orderCost);
        }
    }
}
